#! /usr/bin/env bash
#
# ----------------------------------------------------------------------------
# Install Mongo database
# ----------------------------------------------------------------------------
#

INCLUDES="core-install.bash"

if [[ -f "${INCLUDES}" ]]; then source "${INCLUDES}"
else
    echo -n "$( basename "${0}" ): error: "
    echo    "Could not source the '${INCLUDES}' file ! "
    exit
fi

GetScriptName "${0}"

GetOSversion

SET_NAME="Mongo Database"

SERVICE_NAME="mongodb"
(( MAJOR < 17 )) && SERVICE_NAME="mongod"

USAGE="
MongoDB is a free and open-source cross-platform document-oriented database
program.  Classified as a NoSQL database program, MongoDB uses JSON-like
documents with schemata.

MongoDB supports field, range query, and regular expression searches. Queries
can return specific fields of documents and also include user-defined
JavaScript functions.  Queries can also be configured to return a random sample
of results of a given size.  Fields in a MongoDB document can be indexed with
primary and secondary indices.

MongoDB can be used as a file system, called GridFS, with load balancing and
data replication features over multiple machines for storing files.  This
function, called grid file system, is included with MongoDB drivers.  MongoDB
exposes functions for file manipulation and content to developers.  GridFS can
be accessed using the mongofiles utility or plugins for Nginx and lighttpd.
GridFS divides a file into parts, or chunks, and stores each of those chunks
as a separate document.

MongoDB is developed by MongoDB Inc. (formerly 10gen), and is published under
a combination of the 'Server Side Public License' and the Apache License.  The
MongoDB Community Edition is free and available for Windows, Linux, and OS X.
MongoDB Enterprise Server is the commercial edition of MongoDB, available as
part of the MongoDB Enterprise Advanced subscription.

https://www.mongodb.com/
https://en.wikipedia.org/wiki/MongoDB
https://www.digitalocean.com/community/tutorials/how-to-install-mongodb-on-ubuntu-18-04
https://www.digitalocean.com/community/tutorials/how-to-install-and-secure-mongodb-on-ubuntu-16-04
"

EDIT_COMMAND="
* Edit the MongoDB configuration file to enable authentication;
  Find the line '#auth = true' and remove the '#' character, then save:
        sudo vi /etc/mongod.conf
"

TEST_RESPONSE="
        admin  0.000GB
        config  0.000GB
        local  0.000GB
"

if (( MAJOR < 17 )); then
EDIT_COMMAND="
* Edit the MongoDB configuration file to enable authentication; Make
  the necessary edits so that the 'security' stanza looks like the below.
  (Note that the 'security' line has no spaces at the beginning, and the
  'authorization' line must be indented with two spaces.)
        security:
          authorization: \"enabled\"
"
TEST_RESPONSE="
        admin  0.000GB
        local  0.000GB
"
fi

POST_INSTALL="
===============================================================================

Set up an admin account for MongoDB, and secure the server.  Follow these
instructions in a separate terminal window (so that you don't scroll these
procedures off the screen):

* Run the MongoDB shell by entering 'mongo' in a terminal window.
  You should see 'WARNING: Access control is not enabled for the database'.

* In the mongo shell, enter the following commands.  (Note that '>' and '...'
  prompts are generated by MongoDB, and the user/pwd shown is an example.)
        > use admin
        switched to db admin
        > db.createUser(
          {
            user: \"admin\",
            pwd: \"1234\",
            roles: [ { role: \"userAdminAnyDatabase\", db: \"admin\" } ]
          }
        )

* If all goes well, mongo will respond with:
        Successfully added user: {
                \"user\" : \"<admin-username>\",
                \"roles\" : [
                        {
                                \"role\" : \"userAdminAnyDatabase\",
                                \"db\" : \"admin\"
                        }
                ]
        }

* Press '<Ctrl-C>' (or 'exit' followed by '<Enter>') to exit the shell.
${EDIT_COMMAND}
* Once you've saved and exited the file, restart the daemon, and verify
  that 'Active: active (running)' appears in the 'status' output:
        sudo systemctl restart ${SERVICE_NAME}
        sudo systemctl status ${SERVICE_NAME}

* Connect without credentials to verify actions are restricted.  The 'show'
  command should throw a 'not authorized on admin to execute command' error:
        mongo
        > show dbs

* Enter 'exit', then log in as the admin previously created:
        mongo -u <admin-username> -p --authenticationDatabase admin
        > show dbs

* If successful, it should respond with: ${TEST_RESPONSE}
* Press '<Ctrl-C>' (or 'exit' followed by '<Enter>') to exit the shell.
"

# Invoked with no parameters, or with the '-i' switch?
#
if [[ -z "${1}" || "${1}" == "-i" ]]; then
    PerformAppInstallation "$@"
    exit $?
fi

# For versions after Ubuntu 17, MongoDB is being redistributed by Canonical;
# Hence, it can be installed from the Ubuntu repos with a simple command;
# This also applies to installing in ChromeOS Debian containers.
#
if (( MAJOR > 17 || MAJOR < 12 )); then

    PACKAGE_SET="mongodb  "
    PerformAppInstallation "-r" "$@"

    # Verify that the MongoDB service has started properly:
    #
    RESULT=$( sudo systemctl status "${SERVICE_NAME}" )

    (( $? == 0 )) || ThrowError "${ERR_CMDFAIL}" "${APP_SCRIPT}" \
        "MongoDB service did not start automatically ! "

    # Perform a more in-depth check on whether the service is running:
    #
    RESULT=$( mongo --eval 'db.runCommand({ connectionStatus: 1 })' )
    printf "%s" "${RESULT}" | grep -qi '"ok" : 1'

    (( $? == 0 )) || ThrowError "${ERR_CMDFAIL}" "${APP_SCRIPT}" \
        "MongoDB service started, but failed status check ! "

else
    #
    # Earlier versions of Mongo require using the Mongo repository:
    #
    QualifySudo
    sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 \
        --recv 0C49F3730359A14518585931BC711F9BA15703C6

    (( $? == 0 )) || ThrowError "${ERR_CMDFAIL}" "${APP_SCRIPT}" \
        "Failed to install the MongoDB repository key ! "

    # Insert a 'sources.list' file for updates from the repository:
    #
    echo "deb [ arch=amd64,arm64 ] http://repo.mongodb.org/apt/ubuntu xenial/mongodb-org/3.4 multiverse" | \
        sudo tee /etc/apt/sources.list.d/mongodb-org-3.4.list

    (( $? == 0 )) || ThrowError "${ERR_FILEIO}" "${APP_SCRIPT}" \
        "Cannot install the MongoDB repository source file ! "

    # The 'mongodb-org' package should be a metapackage, but it may fail
    # to install all the needed dependencies (particularly in Debian);
    #
    PACKAGE_SET="mongodb-org  mongodb-org-shell  mongodb-org-server
        mongodb-org-mongos  mongodb-org-tools  "

    PerformAppInstallation "-r" "-u"

    (( $? == 0 )) || ThrowError "${ERR_CMDFAIL}" "${APP_SCRIPT}" \
        "Failed to install the MongoDB packages ! "

    # Once the installation is complete, start the Mongo daemon:
    #
    sudo systemctl start "${SERVICE_NAME}"

    (( $? == 0 )) || ThrowError "${ERR_CMDFAIL}" "${APP_SCRIPT}" \
        "Failed to start the MongoDB service ! "

    # Since systemctl doesn't provide output, check the status to
    # verify that the service has started properly:
    #
    RESULT=$( sudo systemctl status "${SERVICE_NAME}" )

    (( $? == 0 )) || ThrowError "${ERR_CMDFAIL}" "${APP_SCRIPT}" \
        "MongoDB service failed status check ! "

    # Ensure that the service starts at each bootup:
    #
    sudo systemctl enable "${SERVICE_NAME}"

    (( $? == 0 )) || ThrowError "${ERR_CMDFAIL}" "${APP_SCRIPT}" \
        "Failed to enable MongoDB as a startup service ! "
fi

# Now secure the database -- MongoDB is infamous for installing as insecure;
# However, this isn't something that can be scripted, so tell the user in
# the post-install prompt...
#
InstallComplete
